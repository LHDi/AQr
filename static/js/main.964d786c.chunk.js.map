{"version":3,"sources":["fragments/Camera/index.js","fragments/Display/index.js","App.js","serviceWorker.js","index.js"],"names":["window","adapter","require","resList","getConstraints","height","width","filter","res","min","max","map","label","cameraReducer","cameraList","selected","type","id","list","deviceId","alert","streamReducer","stream","constraints","permitted","selectedConstraints","newstream","newConstraints","newSelectedConstraint","getVideoTracks","applyConstraints","Camera","children","useReducer","dispatchCamera","dispatchStream","useState","error","setError","reset","useCallback","getTracks","forEach","t","stop","useEffect","a","navigator","mediaDevices","enumerateDevices","camList","dev","kind","camObject","push","console","Error","getCameraList","selectedCamera","length","undefined","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","exact","getCapabilities","defaultConstraints","getSettings","getCameraPermission","message","onChange","e","target","value","log","cam","key","i","Display","monitor","useRef","current","srcObject","ref","autoPlay","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.964d786c.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useReducer } from 'react';\n\nwindow.adapter = require('webrtc-adapter');\n\nconst resList = [\n\t[640, 480, '480p - 4:3'],\n\t[1280, 720, '720p - 16:9'],\n\t[1920, 1080, '1080p - 16:9']\n];\n\nconst getConstraints = ({height, width}) => {\n\tconst filtredRes = resList.filter((res) => (\n\t\tres[0] >= width.min && res[0] <= width.max\n\t\t&& res[1] >= height.min && res[1] <= height.max\n\t));\n\treturn filtredRes.map(res => ({\n\t\tlabel: res[2],\n\t\twidth: res[0],\n    height: res[1]\n\t}))\n};\n\nfunction hasGetUserMedia() {\n  return !!(\n    (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    navigator.msGetUserMedia\n  );\n};\n\nconst cameraReducer = ({cameraList, selected}, {type, id, list}) => {\n\tswitch (type) {\n\t\tcase 'SET_LIST':\n\t\t\treturn {cameraList: list, selected: list[1].deviceId};\n\t\tcase 'SELECT':\n\t\t\talert(id);\n\t\t\t\n\t\t\treturn {cameraList: [...cameraList], selected: id};\n\t\tdefault:\n\t\t\treturn {cameraList: [...cameraList], selected};\n\t}\n}\n\nconst streamReducer = ({stream, constraints, permitted, selectedConstraints}, {type, newstream, newConstraints, newSelectedConstraint}) => {\n\tswitch (type) {\n\t\tcase 'SET_STREAM':\n\t\t\treturn {stream: newstream, permitted: true, constraints: newConstraints, selectedConstraints: newSelectedConstraint};\n\t\tcase 'SET_STREAM_CONS':\n\t\t\tstream.getVideoTracks()[0].applyConstraints({...newSelectedConstraint})\n\t\t\treturn {stream, permitted, constraints, selectedConstraints: newSelectedConstraint};\n\t\tcase 'RESET_STREAM':\n\t\t\treturn {stream: null, permitted: false, constraints: [], selectedConstraints: null};\n\t\tdefault:\n\t\t\treturn {stream, permitted, constraints, selectedConstraints};\n\t}\n}\n\nconst Camera = ({children}) => {\n\tconst [{selected, cameraList}, dispatchCamera] = useReducer(cameraReducer, {cameraList: [], selected: null});\n\tconst [{stream, permitted, constraints, selectedConstraints}, dispatchStream] = useReducer(streamReducer, {stream: null, permitted: false, constraints: [], selectedConstraints: null});\n\tconst [error, setError] = useState(null);\n\t\n\tconst reset = useCallback(() => {\n\t\tsetError(null);\n\t\tif(stream)\n\t\t\tstream.getTracks().forEach(t => t.stop());\n\t}, [stream]);\n\n\tuseEffect(() => {\n\t\tconst getCameraList = async () => {\n\t\t\tif('mediaDevices' in navigator && 'enumerateDevices' in navigator.mediaDevices) {\n\t\t\t\ttry {\n\t\t\t\t\tconst list = await navigator.mediaDevices.enumerateDevices();\n\t\t\t\t\tlet camList = [];\n\t\t\t\t\tlist.forEach(dev => {\n\t\t\t\t\t\tif(dev.kind === 'videoinput'){\n\t\t\t\t\t\t\tconst camObject = {label: dev.label, deviceId: dev.deviceId};\n\t\t\t\t\t\t\tcamList.push(camObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tdispatchCamera({type: 'SET_LIST', list: camList});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\n\t\t\t\t\tsetError(new Error('Camera Error!'));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tgetCameraList();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [permitted]);\n\n\tuseEffect(() => {\n\t\treset()\n\t\tconst selectedCamera = (!!cameraList.length && selected) ? selected:undefined;\n\t\t\n\t\tif(!selectedCamera) return;\n\t\tconst getCameraPermission = async () => {\n\t\t\tif(hasGetUserMedia() && !!selectedCamera){\n\t\t\t\ttry {\n\t\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({\n\t\t\t\t\t\tvideo: {\n\t\t\t\t\t\t\tdeviceId: {\n\t\t\t\t\t\t\t\texact: selectedCamera\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tconst constraints = !!stream.getTracks()[0].getCapabilities ? getConstraints(stream.getTracks()[0].getCapabilities()) : [];\n\t\t\t\t\tconst defaultConstraints = !!stream.getTracks()[0].getSettings ? stream.getTracks()[0].getSettings() : null;\t\t\t\t\t\n\t\t\t\t\tdispatchStream({type: 'SET_STREAM', newstream: stream, newConstraints: constraints, newSelectedConstraint: defaultConstraints});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tsetError(e)\n\t\t\t\t\t//return setError(new Error('Please allow us to use the camera.'))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn setError(new Error('No camera device was found!'));\n\t\t\t};\n\t\t};\n\t\tgetCameraPermission();\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [selected]);\n\n\tif(!!error) \n\t\treturn (<span>{error.message}</span>)\n\treturn (\n\t\t<>\n\t\t\t{\n\t\t\t\t!!cameraList.length && selected &&\n\t\t\t\t<>\n\t\t\t\t\t<select onChange={(e) => {dispatchCamera({type: 'SELECT', id: e.target.value}); console.log(stream)}}>\n\t\t\t\t\t\t{cameraList.map(cam => {\t\t\t\t\t\n\t\t\t\t\t\t\treturn <option key={cam.deviceId} value={cam.deviceId}>{cam.label}</option>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</select>\n\t\t\t\t\t{\n\t\t\t\t\t\tselectedConstraints&& selectedConstraints.width\n\t\t\t\t\t}\n\t\t\t\t\t{!!constraints.length &&\n\t\t\t\t\t\t<select onChange={e => dispatchStream({type: 'SET_STREAM_CONS', newSelectedConstraint: constraints[e.target.value]})}>\n\t\t\t\t\t\t\t{constraints.map((res, i) => {\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn <option key={res.label} value={i}>{res.label}</option>\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t}\n\t\t\t\t</>\n\t\t\t}\n\t\t\t{children({stream})}\n\t\t</>\n\t);\n}\n\nexport default Camera;\n","import React, { useEffect, useRef } from 'react';\n\nconst Display = ({stream}) => {\n\tconst monitor = useRef(null);\n\tuseEffect(() => {\n\t\tif(!stream) return;\n\t\tmonitor.current.srcObject = stream;\n\t}, [stream]);\n\treturn (\n\t\t<div>\n\t\t\t<video ref={monitor} autoPlay></video>\n\t\t</div>\n\t);\n}\n\nexport default Display;\n","import React from 'react';\nimport './App.css';\nimport Camera from './fragments/Camera';\nimport Display from './fragments/Display';\n\nfunction App() {\n\n  return (\n\t\t<>\n\t\t\t<Camera>\n\t\t\t\t{({stream}) => (\n\t\t\t\t\t<Display stream={stream} />\n\t\t\t\t)}\n\t\t\t</Camera>\n\t\t</>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}