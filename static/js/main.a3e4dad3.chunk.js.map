{"version":3,"sources":["fragments/Camera/CameraControle.js","fragments/Camera/index.js","fragments/Display/index.js","App.js","serviceWorker.js","index.js"],"names":["CameraListControle","cameraList","selectedCameraId","selectCamera","defaultValue","onChange","e","target","value","map","cam","key","deviceId","label","StreamResControle","constraints","selectedConstraint","selectConstraint","length","findIndex","width","res","i","CameraControle","streamProps","cameraProps","window","adapter","require","resList","getConstraints","height","filter","min","max","cameraReducer","type","id","list","streamReducer","stream","permitted","newstream","newConstraints","newSelectedConstraint","getVideoTracks","applyConstraints","Camera","children","useReducer","dispatchCamera","dispatchStream","useState","error","setError","reset","useCallback","getTracks","forEach","t","stop","useEffect","a","navigator","mediaDevices","enumerateDevices","camList","dev","kind","camObject","push","getCameraList","SelectedCamera","undefined","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","exact","getCapabilities","defaultConstraints","getSettings","Error","getCameraPermission","message","Display","style","monitor","useRef","current","srcObject","Object","assign","ref","autoPlay","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3e4dad3.chunk.js","sourcesContent":["import React from 'react';\n\nconst CameraListControle = ({cameraList, selectedCameraId, selectCamera}) => {\n\t\n\t\n\treturn (\n\t\t<div>\n\t\t\t<select defaultValue={selectedCameraId} onChange={e => selectCamera(e.target.value)}>\n\t\t\t\t{cameraList.map(cam => {\t\t\t\t\t\n\t\t\t\t\treturn <option key={cam.deviceId} value={cam.deviceId}>{cam.label}</option>\n\t\t\t\t})}\n\t\t\t</select>\n\t\t</div>\n\t);\n}\n\nconst StreamResControle = ({constraints, selectedConstraint, selectConstraint}) => {\n\treturn (\n\t\t<div>\n\t\t\t{!!constraints.length &&\n\t\t\t\t<select value={constraints.findIndex(e => e.width===selectedConstraint.width)} onChange={e => selectConstraint(constraints[e.target.value])}>\n\t\t\t\t\t{constraints.map((res, i) => {\t\t\t\t\t\n\t\t\t\t\t\treturn <option key={res.label} value={i}>{res.label}</option>\n\t\t\t\t\t})}\n\t\t\t\t</select>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nconst CameraControle = ({streamProps, cameraProps}) => {\n\treturn (\n\t\t<div>\n\t\t\t<CameraListControle {...cameraProps}/>\n\t\t\t<StreamResControle {...streamProps}/>\n\t\t</div>\n\t)\n}\n\nexport default CameraControle;\n","import React, { useState, useEffect, useCallback, useReducer } from 'react';\nimport CameraControle from './CameraControle';\n\nwindow.adapter = require('webrtc-adapter');\n\nconst resList = [\n\t[640, 480, '480p - 4:3'],\n\t[1280, 720, '720p - 16:9'],\n\t[1920, 1080, '1080p - 16:9']\n];\n\nconst getConstraints = ({height, width}) => {\n\tconst filtredRes = resList.filter((res) => (\n\t\tres[0] >= width.min && res[0] <= width.max\n\t\t&& res[1] >= height.min && res[1] <= height.max\n\t));\n\treturn filtredRes.map(res => ({\n\t\tlabel: res[2],\n\t\twidth: res[0],\n    height: res[1]\n\t}))\n};\n\nfunction hasGetUserMedia() {\n  return !!(\n    (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    navigator.msGetUserMedia\n  );\n};\n\nconst cameraReducer = ({cameraList, selectedCameraId}, {type, id, list}) => {\n\tswitch (type) {\n\t\tcase 'SET_LIST':\n\t\t\treturn {cameraList: list, selectedCameraId: list[0].deviceId};\n\t\tcase 'SELECT':\n\t\t\treturn {cameraList: [...cameraList], selectedCameraId: id};\n\t\tdefault:\n\t\t\treturn {cameraList: [...cameraList], selectedCameraId};\n\t}\n}\n\nconst streamReducer = ({stream, constraints, permitted, selectedConstraint}, {type, newstream, newConstraints, newSelectedConstraint}) => {\n\tswitch (type) {\n\t\tcase 'SET_STREAM':\n\t\t\treturn {stream: newstream, permitted: true, constraints: newConstraints, selectedConstraint: newSelectedConstraint};\n\t\tcase 'SET_STREAM_CONS':\n\t\t\tstream.getVideoTracks()[0].applyConstraints({...newSelectedConstraint})\n\t\t\treturn {stream, permitted, constraints, selectedConstraint: newSelectedConstraint};\n\t\tcase 'RESET_STREAM':\n\t\t\treturn {stream: null, permitted: false, constraints: [], selectedConstraint: null};\n\t\tdefault:\n\t\t\treturn {stream, permitted, constraints, selectedConstraint};\n\t}\n}\n\nconst Camera = ({children}) => {\n\tconst [{selectedCameraId, cameraList}, dispatchCamera] = useReducer(cameraReducer, {cameraList: [], selectedCameraId: null});\n\tconst [{stream, permitted, constraints, selectedConstraint}, dispatchStream] = useReducer(streamReducer, {stream: null, permitted: false, constraints: [], selectedConstraint: null});\n\tconst [error, setError] = useState(null);\n\t\n\tconst reset = useCallback(() => {\n\t\tsetError(null);\n\t\tif(stream)\n\t\t\tstream.getTracks().forEach(t => t.stop());\n\t}, [stream]);\n\n\tuseEffect(() => {\n\t\tconst getCameraList = async () => {\n\t\t\tif('mediaDevices' in navigator && 'enumerateDevices' in navigator.mediaDevices) {\n\t\t\t\ttry {\n\t\t\t\t\tconst list = await navigator.mediaDevices.enumerateDevices();\n\t\t\t\t\tlet camList = [];\n\t\t\t\t\tlist.forEach(dev => {\n\t\t\t\t\t\tif(dev.kind === 'videoinput'){\n\t\t\t\t\t\t\tconst camObject = {label: dev.label, deviceId: dev.deviceId};\n\t\t\t\t\t\t\tcamList.push(camObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tdispatchCamera({type: 'SET_LIST', list: camList});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tsetError(error);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tgetCameraList();\n\t}, [permitted]);\n\n\tuseEffect(() => {\n\t\treset()\n\t\tconst SelectedCamera = (!!cameraList.length && selectedCameraId) ? selectedCameraId:undefined;\n\t\t\n\t\tif(!SelectedCamera) return;\n\t\tconst getCameraPermission = async () => {\n\t\t\tif(hasGetUserMedia() && !!SelectedCamera){\n\t\t\t\ttry {\n\t\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({\n\t\t\t\t\t\tvideo: {\n\t\t\t\t\t\t\tdeviceId: {\n\t\t\t\t\t\t\t\texact: SelectedCamera\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tconst constraints = !!stream.getTracks()[0].getCapabilities ? getConstraints(stream.getTracks()[0].getCapabilities()) : [];\n\t\t\t\t\tconst defaultConstraints = !!stream.getTracks()[0].getSettings ? stream.getTracks()[0].getSettings() : null;\t\t\t\t\t\n\t\t\t\t\tdispatchStream({type: 'SET_STREAM', newstream: stream, newConstraints: constraints, newSelectedConstraint: defaultConstraints});\n\t\t\t\t\tstream.getTracks()[0].applyConstraints({\n\t\t\t\t\t\tdeviceId: {\n\t\t\t\t\t\t\texact: cameraList[1].deviceId\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} catch (error) {\n\t\t\t\t\tsetError(error);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn setError(new Error('No camera device was found!'));\n\t\t\t};\n\t\t};\n\t\tgetCameraPermission();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [selectedCameraId, cameraList.length]);\n\n\tif(!!error) \n\t\treturn (<span>{error.message}</span>)\n\treturn (\n\t\t<>\n\t\t\t<CameraControle\n\t\t\t\tcameraProps={{cameraList, selectedCameraId, selectCamera: (id) => dispatchCamera({type: 'SELECT', id})}}\n\t\t\t\tstreamProps={{constraints, selectedConstraint, selectConstraint: (newSelectedConstraint) => dispatchStream({type: 'SET_STREAM_CONS', newSelectedConstraint})}}\n\t\t\t/>\n\t\t\t{children({stream})}\n\t\t</>\n\t);\n}\n\nexport default Camera;\n","import React, { useEffect, useRef } from 'react';\n\nconst Display = ({stream, style}) => {\n\tconst monitor = useRef(null);\n\tuseEffect(() => {\n\t\tif(!stream) return;\n\t\tmonitor.current.srcObject = stream;\n\t}, [stream]);\n\treturn (\n\t\t<div style={Object.assign({width: '100%', height: '100%'}, style)}>\n\t\t\t<video ref={monitor} autoPlay style={{width: '100%', height: '100%'}}></video>\n\t\t</div>\n\t);\n}\n\nexport default Display;\n","import React from 'react';\nimport './App.css';\nimport Camera from './fragments/Camera';\nimport Display from './fragments/Display';\n\nfunction App() {\n\n  return (\n\t\t<>\n\t\t\t<Camera>\n\t\t\t\t{({stream}) => (\n\t\t\t\t\t<Display stream={stream}/>\n\t\t\t\t)}\n\t\t\t</Camera>\n\t\t</>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}