{"version":3,"sources":["fragments/Camera/index.js","App.js","serviceWorker.js","index.js"],"names":["Camera","children","useState","setStream","error","setError","container","useRef","useEffect","a","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","stream","current","srcObject","Error","getCameraPermission","ref","autoPlay","message","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAWA,IAsCeA,EAtCA,SAAC,GAAe,EAAdC,SAAe,IAAD,EAEFC,mBAAS,MAFP,mBAEfC,GAFe,aAGJD,mBAAS,MAHL,mBAGvBE,EAHuB,KAGhBC,EAHgB,KAIxBC,EAAYC,iBAAO,MAyBzB,OAvBAC,qBAAU,YACgB,uCAAG,4BAAAC,EAAA,2DAdzBC,UAAUC,cAAgBD,UAAUC,aAAaC,cAClDF,UAAUG,oBACVH,UAAUI,iBACVJ,UAAUK,gBAWgB,wBAG1BL,UAAUE,aACVF,UAAUC,aAAaC,cACvBF,UAAUG,oBACVH,UAAUI,iBACVJ,UAAUK,eAPgB,kBASJL,UAAUC,aAAaC,aAAa,CAAEI,OAAO,IATzC,OASnBC,EATmB,OAUzBd,EAAUc,GACVX,EAAUY,QAAQC,UAAYF,EAXL,2EAalBZ,EAAS,IAAIe,MAAM,wCAbD,yDAgBnBf,EAAS,IAAIe,MAAM,iCAhBA,kEAAH,qDAmBzBC,KACE,IAGF,oCACC,2BAAOC,IAAKhB,EAAWiB,UAAQ,IAC9BnB,GAAS,8BAAOA,EAAMoB,WC7BXC,MAXf,WAEE,OACA,oCACC,kBAAC,EAAD,MACE,SAACR,GAAD,OAAa,0CCIES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBxB,WACrBA,UAAUyB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dac88f53.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction hasGetUserMedia() {\n  return !!(\n    (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    navigator.msGetUserMedia\n  );\n}\n\nconst Camera = ({children}) => {\n//\tconst [camera, setCamera] = useState(navigator?navigator.mediaDevices?navigator.mediaDevices.getUserMedia?navigator.mediaDevices : null : null : null);\n\tconst [stream, setStream] = useState(null);\n\tconst [error, setError] = useState(null);\n\tconst container = useRef(null);\n\n\tuseEffect(() => {\n\t\tconst getCameraPermission = async () => {\n\t\t\t//navigator.mediaDevices.enumerateDevices().then(d => d.forEach(b=>alert(b.kind)))\n\t\t\tif(hasGetUserMedia()){\n\t\t\t\tnavigator.getUserMedia =\n\t\t\t\tnavigator.mediaDevices.getUserMedia ||\n\t\t\t\tnavigator.webkitGetUserMedia ||\n\t\t\t\tnavigator.mozGetUserMedia ||\n\t\t\t\tnavigator.msGetUserMedia;\n\t\t\t\ttry {\n\t\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({ video: true });\n\t\t\t\t\tsetStream(stream);\n\t\t\t\t\tcontainer.current.srcObject = stream;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn setError(new Error('Please allow us to use the camera.'))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn setError(new Error('No camera device was found!'));\n\t\t\t};\n\t\t};\n\t\tgetCameraPermission();\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<video ref={container} autoPlay></video>\n\t\t\t{error && <span>{error.message}</span>}\n\t\t</>\n\t\t\t//children(stream, error)\n\t);\n}\n\nexport default Camera;\n","import React, { useRef } from 'react';\nimport './App.css';\nimport Camera from './fragments/Camera';\nfunction App() {\n\n  return (\n\t\t<>\n\t\t\t<Camera>\n\t\t\t\t{(stream) => (<></>)}\n\t\t\t</Camera>\n\t\t</>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}